#+TITLE: Emacs Configuration File
#+AUTHOR: Tim Hilt
#+DATE: 11.10.2019
#+STARTUP: content

* Bootstrap

** Defaults

#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)                           ; Disable the cursor blinking
    (scroll-bar-mode 0)                             ; Disable the scroll bar
    (tool-bar-mode 0)                               ; Disable the tool bar
    (menu-bar-mode 0)                               ; Disable the menu bar
    (tooltip-mode 0))                               ; Disable the tooltips

  (setq-default
   auto-window-vscroll nil                          ; Lighten vertical scroll
   confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
   fill-column 80                                   ; Set width for automatic line breaks
   indent-tabs-mode nil                             ; Stop using tabs to indent
   tab-width 4                                      ; Set width for tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 10                                 ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   split-height-threshold nil                       ; Disable vertical window splitting
   split-width-threshold nil                        ; Disable horizontal window splitting
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   ring-bell-function 'ignore                       ; Disable annoying bell sound
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width

  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show matching char
  (electric-pair-mode 1)                            ; Insert matching character
  (add-to-list
   'display-buffer-alist
   (cons "\\*Async Shell Command\\*.*"
         (cons #'display-buffer-no-window nil)))    ; Don't open new Buffer when shell-command was run
  (server-start)                                    ; Start server when opening, so that ranger can open a file

  ;; Changes C-w and M-w to Kill/Copy whole line, if no region is active
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))

  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
#+END_SRC

** Modify Keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k")                     ; Kill current buffer without asking for confirmation
                  'kill-current-buffer)
  (global-set-key (kbd "C-c e")                     ; Opens the Config File for editing
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs.d/README.org")))
  (global-set-key (kbd "C-c r")                     ; Reloads init.el without having to restart Emacs
                  (lambda ()
                    (interactive)
                    (load-file user-init-file)))
  (global-set-key (kbd "C-x 2")                     ; Cursor follows, when window is split!
                  (lambda ()
                    (interactive)
                    (split-window-vertically)
                    (other-window 1)))
  (global-set-key (kbd "C-x 3")
                  (lambda ()(interactive)
                    (split-window-horizontally)
                    (other-window 1)))

#+END_SRC

** Faces

#+BEGIN_SRC emacs-lisp

#+END_SRC

* Emacs integrated major-modes

** Org-Mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)        ; Indent Org-Mode-Structure
  (add-to-list 'org-structure-template-alist        ; Template for emacs-lisp Codeblocks
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* Packages
** Init

The following is used to initialize the package-repository (MELPA)

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

*** Use-Package

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)                ; Always apply :ensure t - Option when declaring a package via use-package
#+END_SRC

** GUI

*** Themes

The Doom-Themes are kind of the state of the art in stylish and modern Emacs-Themes. I'm using ~doom-molokai~ for consistency with my setup.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init
     ;; Global settings (defaults)
    (setq doom-themes-enable-bold t                 ; if nil, bold is universally disabled
          doom-themes-enable-italic t)              ; if nil, italics is universally disabled
    :config
    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-molokai t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)

    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

*** Org-Bullets

The ~org-bullets~-package replaces the standard Stars of headings in org-mode by Unicode-Bullets.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Modernizing setup

The following packages just inherently make emacs look more polished and modern.

**** all-the-icons

Inserts Unicode symbols in locations like the menubar or the dashboard

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

**** doom-modeline

Better Modeline that fits well with the theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+END_SRC

**** dashboard

A welcome screen that shows startup-info and other stuff

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-banner-logo-title "Hello Master. I'm here to serve you.")
    (setq dashboard-startup-banner "~/Pictures/emacslogo.png")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Editor enhancements

*** Ivy

The following packages are a plug-in-replacement for standard Emacs-Functions, that deal with things outside the buffer-window like finding a string in the buffer, opening an external file, switching buffers or executing commands.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . swiper))

  (use-package ivy
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    :config
    (ivy-mode 1)
    :bind
    (:map ivy-minibuffer-map
          ("RET" . ivy-alt-done)))

  (use-package counsel
    :init
    (setq counsel-find-file-ignore-regexp "\\(?:\\`[.]\\)")
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file))
#+END_SRC

*** Rainbow-delimiters

When working with a lot of brackets, parens and alike you can quickly loose track over which paren is the correct one. ~Rainbow-delimiters~ solves this problem, by coloring every paren-pair individually.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Hungry delete

Deletes a bunch of whitespace at once

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC

** Snippets and Autocomplete

*** Yasnippet

Yasnippet is a package, that let's you insert larger Code-Snippets by typing a prefix and evaluating it with <TAB>.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+END_SRC

*** Company-Mode

Company-Mode is a Completion-Frontend

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    (:map company-active-map
          ("TAB" . company-complete-selection)
          ([tab] . company-complete-selection)
          ("<right>" . company-complete-common)
          ("C-n" . 'company-select-next)
          ("C-p" . 'company-select-previous))
    :hook
    (prog-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t))
#+END_SRC

** Languages

*** Lsp-Mode

LSP is short for "Language-Server-Protocol". It attaches to a running language-server, that is configured outside of Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (python-mode . lsp)
    ;; (latex-mode . lsp)
    :commands lsp)
    ;; :config
    ;; (lsp-register-client
    ;;  (make-lsp-client :new-connection (lsp-stdio-connection "digestif")
    ;;                   :major-modes '(latex-mode plain-tex-mode)
    ;;                   :server-id 'digestif))
    ;; (add-to-list 'lsp-language-id-configuration '(latex-mode . "latex"))
    ;; (add-to-list 'lsp-language-id-configuration '(plain-tex-mode . "plaintex")))
#+END_SRC

**** Company-Lsp

LSP-Backend for Company-Mode

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))
#+END_SRC

*** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :init
    (setq TeX-electric-math (cons "\\(" "\\)"))
    (setq LaTeX-electric-left-right-brace t)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    :config
    (TeX-source-correlate-mode)
    (add-to-list 'TeX-view-program-selection
                 '(output-pdf "Zathura")))
#+END_SRC

** Version Control

*** Magit

Magit is a wrapper and an interface around git that makes version control in Emacs a whole lot easier than anywhere else

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC
