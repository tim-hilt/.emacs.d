#+Title: Emacs Configuration File
#+AUTHOR: Tim Hilt
#+DATE: 11.10.2019
#+STARTUP: content

* Intro

This is my personal ~.emacs~. Below you can see almost all of the settings, 
that i've applied to my Emacs configuration. I've rewritten my configuration, 
because i deleted the previous one. This is the reason why you can read this.
I decided to backup and publish my configuration for Emacs as a backup for myself
but also for giving back to the community that this config is built on. I hope to 
educate and benefit a few users on the way.

The last section contains a /TODO/-list with features that i wish to implement, as 
well as a time stamp that contains when the feature was added to the list and when 
it was implemented.

* Table of contents                                                 :TOC:
- [[#intro][Intro]]
- [[#bootstrap][Bootstrap]]
  - [[#defaults][Defaults]]
  - [[#own-functions][Own functions]]
  - [[#modify-keybindings][Modify Keybindings]]
  - [[#faces][Faces]]
- [[#emacs-integrated-major-modes][Emacs integrated major-modes]]
  - [[#org-mode][Org-Mode]]
  - [[#dired][Dired]]
- [[#packages][Packages]]
  - [[#init][Init]]
  - [[#gui][GUI]]
  - [[#editor-enhancements][Editor enhancements]]
  - [[#snippets-and-autocomplete][Snippets and Autocomplete]]
  - [[#linting][Linting]]
  - [[#languages][Languages]]
  - [[#version-control][Version Control]]
- [[#wish-list][Wish-list]]
  - [[#correct-highlight-color-in-ivy][Correct highlight-color in ivy]]
  - [[#double-pressing--or-_-in-auctex-inserts-_-or--respectively][Double pressing ~^~ or ~_~ in AucTeX inserts ~_{$}~ or ~^{$}~ respectively]]
  - [[#c-x-c-b-to-read-whole-list-of-buffers][C-x C-b to read whole list of buffers]]
  - [[#disable-gc-at-startup][disable gc at startup]]

* Bootstrap

** Defaults

#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)                           ; Disable the cursor blinking
    (scroll-bar-mode 0)                             ; Disable the scroll bar
    (tool-bar-mode 0)                               ; Disable the tool bar
    (menu-bar-mode 0)                               ; Disable the menu bar
    (tooltip-mode 0))                               ; Disable the tooltips

  (global-display-line-numbers-mode)             ; Enable line numbers

  (setq-default
   auto-window-vscroll nil                          ; Lighten vertical scroll
   confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
   fill-column 80                                   ; Set width for automatic line breaks
   indent-tabs-mode nil                             ; Stop using tabs to indent
   tab-width 4                                      ; Set width for tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 10                                 ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   split-height-threshold nil                       ; Disable vertical window splitting
   split-width-threshold nil                        ; Disable horizontal window splitting
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   ring-bell-function 'ignore                       ; Disable annoying bell sound
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width
   ;; mode-line-format nil)

   (setq split-height-threshold 120
         split-width-threshold 160)

  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show matching char
  (electric-pair-mode 1)                            ; Insert matching character
  (add-to-list
   'display-buffer-alist
   (cons "\\*Async Shell Command\\*.*"
         (cons #'display-buffer-no-window nil)))    ; Don't open new Buffer when shell-command was run
  (server-start)                                    ; Start server when opening, so that ranger can open a file
  (global-hl-line-mode 1)                           ; Highlight the current line
  ;; (global-visual-line-mode t)                       ; Wrap lines in every case, also when using org-mode. Messes up tables though.

  ;; Changes C-w and M-w to Kill/Copy whole line, if no region is active
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))

  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
  (setq auto-save-default nil)                      ; Disable Auto-Saving
  (setq make-backup-files nil)                      ; Disable Backups
#+END_SRC

** Own functions

#+BEGIN_SRC emacs-lisp
  (defun my-run-python ()
    (interactive)
    (shell-command
     (concat
      "alacritty -e ipython -i "
      (buffer-file-name) "&")))

  (defun my-compile-pandoc ()
    (interactive)
    (shell-command
     (concat
      "pandoc "
      (file-name-sans-extension (buffer-file-name))
      ".md -o "
      (file-name-sans-extension (buffer-file-name))
      ".pdf")))

  (defun run-terminal-here ()
    (interactive)
    (shell-command (concat "alacritty --working-directory "
                           (file-name-directory (or load-file-name buffer-file-name))
                           " > /dev/null 2>&1 & disown") nil nil))
#+END_SRC

** Modify Keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k")                     ; Kill current buffer without asking for confirmation
                  'kill-current-buffer)
  (global-set-key (kbd "C-c e")                     ; Opens the Config File for editing
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs.d/README.org")))
  (global-set-key (kbd "C-c r")                     ; Reloads init.el without having to restart Emacs
                  (lambda ()
                    (interactive)
                    (save-buffer "README.org")
                    (load-file user-init-file)))
  (global-set-key (kbd "C-x 2")                     ; Cursor follows, when window is split!
                  (lambda ()
                    (interactive)
                    (split-window-vertically)
                    (other-window 1)))
  (global-set-key (kbd "C-x 3")
                  (lambda ()
                    (interactive)
                    (split-window-horizontally)
                    (other-window 1)))
  (global-set-key (kbd "C-a")
                  'back-to-indentation)
  ;; (global-set-key (kbd "M-RET")
  ;;                 (lambda ()
  ;;                   (interactive)
  ;;                   (shell-command "alacritty&")))
  (require 'python)
  (define-key python-mode-map
    (kbd "C-c C-a")
    (lambda ()
      (interactive)
      (shell-command
       (concat
        "alacritty -e ipython -i "
        (buffer-file-name) "&"))))

  ;; (require 'markdown-mode)
  ;; (define-key markdown-mode-map
  ;;   (kbd "C-c C-a")
  ;;   (lambda ()
  ;;     (interactive)
  ;;     (shell-command
  ;;      (concat
  ;;       "pandoc "
  ;;       (file-name-sans-extension (buffer-file-name))
  ;;       ".md -o "
  ;;       (file-name-sans-extension (buffer-file-name))
  ;;       ".pdf"))))

  (defun end-of-line-and-indented-new-line ()
    (interactive)
    (end-of-line)
    (newline-and-indent))

  (global-set-key (kbd "<S-return>") 'end-of-line-and-indented-new-line)

  (global-set-key (kbd "C-x C-t") 'run-terminal-here)
#+END_SRC

** Faces

#+BEGIN_SRC emacs-lisp

#+END_SRC

* Emacs integrated major-modes

** Org-Mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)        ; Indent Org-Mode-Structure
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (setq org-startup-truncated t)
  (add-to-list 'org-structure-template-alist        ; Template for emacs-lisp Codeblocks
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE" "CANCELLED(c@)")))
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)    ; disables warning
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET")
      'dired-find-alternate-file)                     ; was dired-advertised-find-file
    (define-key dired-mode-map (kbd "^")              ; was dired-up-directory
      (lambda ()
        (interactive)
        (find-alternate-file ".."))))
  (global-set-key (kbd "C-x d") 'dired-jump)        ; Open dired in current dir
#+END_SRC

* Packages
** Init

The following is used to initialize the package-repository (MELPA)

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

*** Use-Package

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)                ; Always apply :ensure t - Option when declaring a package via use-package
#+END_SRC

** GUI

*** Themes

The Doom-Themes are kind of the state of the art in stylish and modern Emacs-Themes. I'm using ~doom-molokai~ for consistency with my setup.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init
     ;; Global settings (defaults)
    (setq doom-themes-enable-bold t                 ; if nil, bold is universally disabled
          doom-themes-enable-italic t)              ; if nil, italics is universally disabled
    :config
    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)

    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

*** Org-Bullets

The ~org-bullets~-package replaces the standard Stars of headings in org-mode by Unicode-Bullets.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org-toc-mode

Adds a table of contents at the top of an org-file

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :hook
    (org-mode . toc-org-mode))
#+END_SRC

*** Modernizing setup

The following packages just inherently make emacs look more polished and modern.

**** all-the-icons

Inserts Unicode symbols in locations like the menubar or the dashboard

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

**** doom-modeline

Better Modeline that fits well with the theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    ;; :init
    ;; (setq
     ;; doom-modeline-major-mode-icon nil
     ;; doom-modeline-major-mode-color-icon nil)
    :hook (after-init . doom-modeline-mode))
#+END_SRC
** Editor enhancements

*** Ivy

The following packages are a plug-in-replacement for standard Emacs-Functions, that deal with things outside the buffer-window like finding a string in the buffer, opening an external file, switching buffers or executing commands.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . swiper))

  (use-package ivy
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-extra-directories ())
    :config
    (ivy-mode 1)
    :bind
    (:map ivy-minibuffer-map
          ("RET" . ivy-alt-done)))

  (use-package counsel
    :init
    (setq counsel-find-file-ignore-regexp "\\(?:\\`[.]\\)")
    :config
    (add-to-list 'ivy-sort-functions-alist
                 '(counsel-recentf . file-newer-than-file-p))
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-x r" . counsel-recentf))


#+END_SRC

**** Ivy-Prescient

#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode))

  (use-package ivy-prescient
    :init (setq ivy-prescient-retain-classic-highlighting 1)
    :after (counsel)
    :config (ivy-prescient-mode))
#+END_SRC

**** Ivy-rich

#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :config (ivy-rich-mode 1))

  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+END_SRC

*** Rainbow-delimiters

When working with a lot of brackets, parens and alike you can quickly loose track over which paren is the correct one. ~Rainbow-delimiters~ solves this problem, by coloring every paren-pair individually.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Hungry delete

Deletes a bunch of whitespace at once

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC

*** Sudo-edit

Allows the user to edit files with root-privileges

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit)
#+END_SRC

*** Visual-regexp

Helps the user to replace a pattern of text and visualizes the input-pattern. ~visual-regexp-steroids~ adds the ability to use Python- and PC-Regex.

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :bind 
    ("C-x C-r" . 'vr/query-replace))

  (use-package pcre2el)

  (use-package visual-regexp-steroids
    :init (setq vr/engine 'pcre2el))
#+END_SRC

*** Expand-region

Allows the user to expand the marked region inside of paired delimiters.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind
    ("C-." . 'er/expand-region)
    ("C-:" . 'er/contract-region))
#+END_SRC

*** Multiple cursors

Pretty much selve explanatory; adds additional cursors to words/lines

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind ("M-SPC" . 'mc/mark-next-like-this))
#+END_SRC

*** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

*** Disable-mouse-mode

#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :config
    (global-disable-mouse-mode))
#+END_SRC

*** hl-todo

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :config (global-hl-todo-mode)
    :init
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#3e9dd5")
            ("FIXME"  . "#3e9dd5")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF"))))
#+END_SRC

*** ace-jump-mode

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :bind ("M-s" . ace-jump-mode))
#+END_SRC

** Snippets and Autocomplete

*** Yasnippet

Yasnippet is a package, that let's you insert larger Code-Snippets by typing a prefix and evaluating it with <TAB>.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+END_SRC

*** Company-Mode

Company-Mode is a Completion-Frontend

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    (:map company-active-map
          ("TAB" . company-complete-selection)
          ([tab] . company-complete-selection)
          ("<right>" . company-complete-common)
          ("C-n" . 'company-select-next)
          ("C-p" . 'company-select-previous))
    :hook
    (prog-mode . company-mode)
    (LaTeX-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t))
#+END_SRC

** Linting

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode +1))

  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (use-package flycheck-popup-tip
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-popup-tip-mode))
#+END_SRC

** Languages

*** Lsp-Mode

LSP is short for "Language-Server-Protocol". It attaches to a running language-server, that is configured outside of Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook 
    (python-mode . lsp)
    ;; (LaTeX-mode . lsp)
    :commands lsp
    :bind
    (:map lsp-mode-map
          (([f12] . 'lsp-find-definition)
           ("C-<f12>" . 'lsp-find-implementation)
           ("M-?". 'lsp-describe-thing-at-point)
           ("M-." . 'lsp-find-references)
           ("C-c C-r f" . 'lsp-format-buffer))))
  ;; Doesn't play well unfortunately
  ;; (when (executable-find "ipython")                 ;; Not related to the package, sets python interpreter to ipython
  ;;   (setq python-shell-interpreter "ipython"))
#+END_SRC

**** Company-Lsp

LSP-Backend for Company-Mode

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))
#+END_SRC

*** LaTeX

**** AucTeX

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :init (pdf-loader-install)
    (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1))))

  (use-package tex
    :ensure auctex
    :defer t
    :init
    (setq TeX-electric-math (cons "\\(" "\\)")
          LaTeX-electric-left-right-brace t
          TeX-source-correlate-method 'synctex
          TeX-source-correlate-start-server t
          TeX-save-query nil)
    (setq-default TeX-engine 'luatex)
    (setq-default TeX-PDF-mode t)
    :config
    (add-to-list 'TeX-view-program-selection
                 '(output-pdf "Zathura"))
    (setq TeX-view-program-selection '((output-pdf "Zathura")))
    ;; (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    :hook
    (LaTeX-mode . TeX-source-correlate-mode)
    (LaTeX-mode . auto-fill-mode)
    (LaTeX-mode . yas-minor-mode))

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+END_SRC

**** Company-AucTeX

#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :init
    (add-to-list 'company-backends 'company-auctex)
    (company-auctex-init))
#+END_SRC

*** Julia

#+BEGIN_SRC emacs-lisp
  (use-package julia-mode)
#+END_SRC

*** Matlab

#+BEGIN_SRC emacs-lisp
  ;; (use-package matlab-mode)
#+END_SRC
nnn
*** Structured Data Modes

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
  (use-package json-mode)
  (use-package csv-mode)
#+END_SRC

*** fish

#+BEGIN_SRC emacs-lisp
  (use-package fish-mode)
#+END_SRC

** Version Control

*** Magit

Magit is a wrapper and an interface around git that makes version control in Emacs a whole lot easier than anywhere else

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    :bind ("C-x g" . magit-status))
#+END_SRC

*** git-gutter-fringe

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :init
    ;; places the git gutter outside the margins.
    (setq-default fringes-outside-margins t)
    ;; thin fringe bitmaps
    (define-fringe-bitmap 'git-gutter-fr:added [224]
      nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224]
      nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240]
      nil nil 'bottom)
    (git-gutter-mode)
    :config
    (advice-add #'magit-stage-file   :after #'+vc-gutter-update-h)
    (advice-add #'magit-unstage-file :after #'+vc-gutter-update-h))
#+END_SRC

* Wish-list

** TODO Correct highlight-color in ivy
- State "TODO"       from              [2019-10-26 Sat 10:54]
** TODO Double pressing ~^~ or ~_~ in AucTeX inserts ~_{$}~ or ~^{$}~ respectively
- State "TODO"       from              [2019-10-30 Wed 07:56]
** TODO C-x C-b to read whole list of buffers
- State "TODO"       from              [2019-11-29 Fri 22:43]
** TODO disable gc at startup
- State "TODO"       from              [2020-01-20 Mo 20:56]
